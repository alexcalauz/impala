// Button

$o-button-padding-v: $gutter / 2;
$o-button-padding-h: $gutter;

.o-button {
  padding: $o-button-padding-v $o-button-padding-h;
  text-decoration: none;
  display: inline-block;
  zoom: 1;
  line-height: normal;
  white-space: nowrap;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
  -webkit-user-drag: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  transition: background 0.2s, color 0.2s;
  font-size: $font-size-m;
  appearance: none;
  -webkit-appearance: none;
  border-width: 0;
  height: $o-button-height;

  &:not(.o-button--square) {
    border-radius: $border-radius-default;
  }
  // &:not(.flexibleHeight) {
  //   height: $o-button-height;
  // }
  &--mini {
    height: 36px;
    padding: calc($gutter / 4) calc($gutter / 2);
    font-size: $font-size-s;
  }

  &.o-button--disabled,
  &[disabled] {
    cursor: not-allowed;
    color: darken($color-neutral, 5%);
    background-color: $color-neutral-dark;
    pointer-events: none;
    border-color: $color-neutral;
  }

  &--extendable {
    position: relative;
    .icon-arrow_drop_down,
    .icon-arrow_drop_up {
      font-size: 26px;
      vertical-align: middle;
      line-height: 18px;
    }

    .list-container {
      position: absolute;
      top: $o-button-height + 1;
      left: 0;
      opacity: 0;
      overflow: hidden;
      background-color: $color-positive;
      border: 1px solid $color-neutral;
      border-radius: $border-radius-default;
      z-index: 1;
      min-width: 240px;

      & > a {
        display: none;
      }

      &.position-right {
        left: auto;
        right: 0px;
      }
    }

    &:hover {
      .list-container {
        opacity: 1;
        height: auto;
        transition: max-height 0.3s ease-in, opacity 0.15s ease-in;

        & > a {
          display: block;
          color: $color-primary;
          text-align: left;
          font-weight: bold;

          &:hover {
            background: $color-primary;
            color: $color-positive;
          }
        }
      }
    }
  }
}

@mixin buttonState($state, $inverted: false) {
  @if $state {
    $textColor: map-get($state, textColor);
    $backgroundColor: map-get($state, backgroundColor);
    $border: map-get($state, border);
    $shadow: map-get($state, shadow);

    @if $backgroundColor {
      @if $inverted {
        background-color: #fff;
      } @else {
        background-color: $backgroundColor;
      }
    }
    @if $textColor {
      @if $inverted {
        color: $backgroundColor;
      } @else {
        color: $textColor;
      }
    }
    @if $border {
      border: nth($border, 1) nth($border, 2) nth($border, 3);
      padding-top: $o-button-padding-v - nth($border, 1);
    } @else {
      @if $inverted {
        border: 1px solid $backgroundColor;
      }
    }
    @if $shadow {
      box-shadow: $shadow;
    }
  }
}

@each $className, $buttonInfo in $buttons {
  .o-button--#{$className} {
    @include buttonState(map-get($buttonInfo, normal));

    &:not(.o-button--disabled):hover {
      @include buttonState(map-get($buttonInfo, hover));
    }

    &:not(.o-button--disabled):active {
      @include buttonState(map-get($buttonInfo, active));
    }

    &.o-button--disabled {
      background-color: $color-neutral;
    }
  }
  .o-button--#{$className}-inverted {
    @include buttonState(map-get($buttonInfo, normal), true);

    &:not(.o-button--disabled):hover {
      @include buttonState(map-get($buttonInfo, hover));
      color: map-get(map-get($buttonInfo, normal), textColor);
    }

    &:not(.o-button--disabled):active {
      @include buttonState(map-get($buttonInfo, active));
    }

    &.o-button--disabled {
      background-color: $color-positive;
    }
  }
}